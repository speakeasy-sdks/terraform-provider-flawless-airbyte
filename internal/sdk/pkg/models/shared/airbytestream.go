// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

// AirbyteStream - the immutable schema defined by the source
type AirbyteStream struct {
	// Path to the field that will be used to determine if a record is new or modified since the last sync. If not provided by the source, the end user will have to specify the comparable themselves.
	DefaultCursorField []string `json:"defaultCursorField,omitempty"`
	// Stream schema using Json Schema specs.
	JSONSchema *StreamJSONSchema `json:"jsonSchema,omitempty"`
	// Stream's name.
	Name string `json:"name"`
	// Optional Source-defined namespace. Airbyte streams from the same sources should have the same namespace. Currently only used by JDBC destinations to determine what schema to write to.
	Namespace *string `json:"namespace,omitempty"`
	// If the source defines the cursor field, then any other cursor field inputs will be ignored. If it does not, either the user_provided one is used, or the default one is used as a backup.
	SourceDefinedCursor *bool `json:"sourceDefinedCursor,omitempty"`
	// If the source defines the primary key, paths to the fields that will be used as a primary key. If not provided by the source, the end user will have to specify the primary key themselves.
	SourceDefinedPrimaryKey [][]string `json:"sourceDefinedPrimaryKey,omitempty"`
	SupportedSyncModes      []SyncMode `json:"supportedSyncModes,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _AirbyteStream AirbyteStream

func (c *AirbyteStream) UnmarshalJSON(bs []byte) error {
	data := _AirbyteStream{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = AirbyteStream(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "defaultCursorField")
	delete(additionalFields, "jsonSchema")
	delete(additionalFields, "name")
	delete(additionalFields, "namespace")
	delete(additionalFields, "sourceDefinedCursor")
	delete(additionalFields, "sourceDefinedPrimaryKey")
	delete(additionalFields, "supportedSyncModes")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c AirbyteStream) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_AirbyteStream(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
