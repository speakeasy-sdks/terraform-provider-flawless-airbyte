// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CheckOperationReadStatus string

const (
	CheckOperationReadStatusSucceeded CheckOperationReadStatus = "succeeded"
	CheckOperationReadStatusFailed    CheckOperationReadStatus = "failed"
)

func (e CheckOperationReadStatus) ToPointer() *CheckOperationReadStatus {
	return &e
}

func (e *CheckOperationReadStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		*e = CheckOperationReadStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckOperationReadStatus: %v", v)
	}
}

type CheckOperationRead struct {
	Message *string                  `json:"message,omitempty"`
	Status  CheckOperationReadStatus `json:"status"`
}

func (o *CheckOperationRead) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *CheckOperationRead) GetStatus() CheckOperationReadStatus {
	if o == nil {
		return CheckOperationReadStatus("")
	}
	return o.Status
}
