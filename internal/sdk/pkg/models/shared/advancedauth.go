// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AdvancedAuthAuthFlowType string

const (
	AdvancedAuthAuthFlowTypeOauth20 AdvancedAuthAuthFlowType = "oauth2.0"
	AdvancedAuthAuthFlowTypeOauth10 AdvancedAuthAuthFlowType = "oauth1.0"
)

func (e AdvancedAuthAuthFlowType) ToPointer() *AdvancedAuthAuthFlowType {
	return &e
}

func (e *AdvancedAuthAuthFlowType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		fallthrough
	case "oauth1.0":
		*e = AdvancedAuthAuthFlowType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AdvancedAuthAuthFlowType: %v", v)
	}
}

type AdvancedAuth struct {
	AuthFlowType             *AdvancedAuthAuthFlowType `json:"authFlowType,omitempty"`
	OauthConfigSpecification *OAuthConfigSpecification `json:"oauthConfigSpecification,omitempty"`
	// Json Path to a field in the connectorSpecification that should exist for the advanced auth to be applicable.
	PredicateKey []string `json:"predicateKey,omitempty"`
	// Value of the predicate_key fields for the advanced auth to be applicable.
	PredicateValue *string `json:"predicateValue,omitempty"`
}
