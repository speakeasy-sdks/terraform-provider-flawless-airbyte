// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Option string

const (
	OptionBasic Option = "basic"
)

func (e Option) ToPointer() *Option {
	return &e
}

func (e *Option) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		*e = Option(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Option: %v", v)
	}
}

type OperatorNormalization struct {
	Option *Option `json:"option,omitempty"`
}

func (o *OperatorNormalization) GetOption() *Option {
	if o == nil {
		return nil
	}
	return o.Option
}
