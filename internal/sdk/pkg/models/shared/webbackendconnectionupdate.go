// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// WebBackendConnectionUpdate - Used to apply a patch-style update to a connection, which means that null properties remain unchanged
type WebBackendConnectionUpdate struct {
	ConnectionID string     `json:"connectionId"`
	Geography    *Geography `json:"geography,omitempty"`
	// Name that will be set to the connection
	Name *string `json:"name,omitempty"`
	// Method used for computing final namespace in destination
	NamespaceDefinition *NamespaceDefinitionType `json:"namespaceDefinition,omitempty"`
	// Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat              *string                             `json:"namespaceFormat,omitempty"`
	NonBreakingChangesPreference *NonBreakingChangesPreference       `json:"nonBreakingChangesPreference,omitempty"`
	NotifySchemaChanges          *bool                               `json:"notifySchemaChanges,omitempty"`
	NotifySchemaChangesByEmail   *bool                               `json:"notifySchemaChangesByEmail,omitempty"`
	Operations                   []WebBackendOperationCreateOrUpdate `json:"operations,omitempty"`
	// Prefix that will be prepended to the name of each stream when it is written to the destination.
	Prefix *string `json:"prefix,omitempty"`
	// optional resource requirements to run workers (blank for unbounded allocations)
	ResourceRequirements *ResourceRequirements `json:"resourceRequirements,omitempty"`
	// if null, then no schedule is set.
	Schedule *ConnectionSchedule `json:"schedule,omitempty"`
	// schedule for when the the connection should run, per the schedule type
	ScheduleData *ConnectionScheduleData `json:"scheduleData,omitempty"`
	// determine how the schedule data should be interpreted
	ScheduleType    *ConnectionScheduleType `json:"scheduleType,omitempty"`
	SkipReset       *bool                   `json:"skipReset,omitempty"`
	SourceCatalogID *string                 `json:"sourceCatalogId,omitempty"`
	// Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	Status *ConnectionStatus `json:"status,omitempty"`
	// describes the available schema (catalog).
	SyncCatalog *AirbyteCatalog `json:"syncCatalog,omitempty"`
}
