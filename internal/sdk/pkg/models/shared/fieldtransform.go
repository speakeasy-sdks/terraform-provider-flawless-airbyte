// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FieldTransformTransformType string

const (
	FieldTransformTransformTypeAddField          FieldTransformTransformType = "add_field"
	FieldTransformTransformTypeRemoveField       FieldTransformTransformType = "remove_field"
	FieldTransformTransformTypeUpdateFieldSchema FieldTransformTransformType = "update_field_schema"
)

func (e FieldTransformTransformType) ToPointer() *FieldTransformTransformType {
	return &e
}

func (e *FieldTransformTransformType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "add_field":
		fallthrough
	case "remove_field":
		fallthrough
	case "update_field_schema":
		*e = FieldTransformTransformType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldTransformTransformType: %v", v)
	}
}

// FieldTransform - Describes the difference between two Streams.
type FieldTransform struct {
	AddField *FieldAdd `json:"addField,omitempty"`
	Breaking bool      `json:"breaking"`
	// A field name is a list of strings that form the path to the field.
	FieldName         []string                    `json:"fieldName"`
	RemoveField       *FieldRemove                `json:"removeField,omitempty"`
	TransformType     FieldTransformTransformType `json:"transformType"`
	UpdateFieldSchema *FieldSchemaUpdate          `json:"updateFieldSchema,omitempty"`
}

func (o *FieldTransform) GetAddField() *FieldAdd {
	if o == nil {
		return nil
	}
	return o.AddField
}

func (o *FieldTransform) GetBreaking() bool {
	if o == nil {
		return false
	}
	return o.Breaking
}

func (o *FieldTransform) GetFieldName() []string {
	if o == nil {
		return []string{}
	}
	return o.FieldName
}

func (o *FieldTransform) GetRemoveField() *FieldRemove {
	if o == nil {
		return nil
	}
	return o.RemoveField
}

func (o *FieldTransform) GetTransformType() FieldTransformTransformType {
	if o == nil {
		return FieldTransformTransformType("")
	}
	return o.TransformType
}

func (o *FieldTransform) GetUpdateFieldSchema() *FieldSchemaUpdate {
	if o == nil {
		return nil
	}
	return o.UpdateFieldSchema
}
