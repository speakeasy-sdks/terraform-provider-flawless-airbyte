// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TimeUnit string

const (
	TimeUnitMinutes TimeUnit = "minutes"
	TimeUnitHours   TimeUnit = "hours"
	TimeUnitDays    TimeUnit = "days"
	TimeUnitWeeks   TimeUnit = "weeks"
	TimeUnitMonths  TimeUnit = "months"
)

func (e TimeUnit) ToPointer() *TimeUnit {
	return &e
}

func (e *TimeUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = TimeUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TimeUnit: %v", v)
	}
}

// ConnectionSchedule - if null, then no schedule is set.
type ConnectionSchedule struct {
	TimeUnit TimeUnit `json:"timeUnit"`
	Units    int64    `json:"units"`
}

func (o *ConnectionSchedule) GetTimeUnit() TimeUnit {
	if o == nil {
		return TimeUnit("")
	}
	return o.TimeUnit
}

func (o *ConnectionSchedule) GetUnits() int64 {
	if o == nil {
		return 0
	}
	return o.Units
}
