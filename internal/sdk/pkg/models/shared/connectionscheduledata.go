// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionScheduleDataBasicScheduleTimeUnit string

const (
	ConnectionScheduleDataBasicScheduleTimeUnitMinutes ConnectionScheduleDataBasicScheduleTimeUnit = "minutes"
	ConnectionScheduleDataBasicScheduleTimeUnitHours   ConnectionScheduleDataBasicScheduleTimeUnit = "hours"
	ConnectionScheduleDataBasicScheduleTimeUnitDays    ConnectionScheduleDataBasicScheduleTimeUnit = "days"
	ConnectionScheduleDataBasicScheduleTimeUnitWeeks   ConnectionScheduleDataBasicScheduleTimeUnit = "weeks"
	ConnectionScheduleDataBasicScheduleTimeUnitMonths  ConnectionScheduleDataBasicScheduleTimeUnit = "months"
)

func (e ConnectionScheduleDataBasicScheduleTimeUnit) ToPointer() *ConnectionScheduleDataBasicScheduleTimeUnit {
	return &e
}

func (e *ConnectionScheduleDataBasicScheduleTimeUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = ConnectionScheduleDataBasicScheduleTimeUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionScheduleDataBasicScheduleTimeUnit: %v", v)
	}
}

type ConnectionScheduleDataBasicSchedule struct {
	TimeUnit ConnectionScheduleDataBasicScheduleTimeUnit `json:"timeUnit"`
	Units    int64                                       `json:"units"`
}

type ConnectionScheduleDataCron struct {
	CronExpression string `json:"cronExpression"`
	CronTimeZone   string `json:"cronTimeZone"`
}

// ConnectionScheduleData - schedule for when the the connection should run, per the schedule type
type ConnectionScheduleData struct {
	BasicSchedule *ConnectionScheduleDataBasicSchedule `json:"basicSchedule,omitempty"`
	Cron          *ConnectionScheduleDataCron          `json:"cron,omitempty"`
}
