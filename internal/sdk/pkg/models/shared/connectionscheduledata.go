// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConnectionScheduleDataTimeUnit string

const (
	ConnectionScheduleDataTimeUnitMinutes ConnectionScheduleDataTimeUnit = "minutes"
	ConnectionScheduleDataTimeUnitHours   ConnectionScheduleDataTimeUnit = "hours"
	ConnectionScheduleDataTimeUnitDays    ConnectionScheduleDataTimeUnit = "days"
	ConnectionScheduleDataTimeUnitWeeks   ConnectionScheduleDataTimeUnit = "weeks"
	ConnectionScheduleDataTimeUnitMonths  ConnectionScheduleDataTimeUnit = "months"
)

func (e ConnectionScheduleDataTimeUnit) ToPointer() *ConnectionScheduleDataTimeUnit {
	return &e
}

func (e *ConnectionScheduleDataTimeUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "minutes":
		fallthrough
	case "hours":
		fallthrough
	case "days":
		fallthrough
	case "weeks":
		fallthrough
	case "months":
		*e = ConnectionScheduleDataTimeUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConnectionScheduleDataTimeUnit: %v", v)
	}
}

type BasicSchedule struct {
	TimeUnit ConnectionScheduleDataTimeUnit `json:"timeUnit"`
	Units    int64                          `json:"units"`
}

func (o *BasicSchedule) GetTimeUnit() ConnectionScheduleDataTimeUnit {
	if o == nil {
		return ConnectionScheduleDataTimeUnit("")
	}
	return o.TimeUnit
}

func (o *BasicSchedule) GetUnits() int64 {
	if o == nil {
		return 0
	}
	return o.Units
}

type Cron struct {
	CronExpression string `json:"cronExpression"`
	CronTimeZone   string `json:"cronTimeZone"`
}

func (o *Cron) GetCronExpression() string {
	if o == nil {
		return ""
	}
	return o.CronExpression
}

func (o *Cron) GetCronTimeZone() string {
	if o == nil {
		return ""
	}
	return o.CronTimeZone
}

// ConnectionScheduleData - schedule for when the the connection should run, per the schedule type
type ConnectionScheduleData struct {
	BasicSchedule *BasicSchedule `json:"basicSchedule,omitempty"`
	Cron          *Cron          `json:"cron,omitempty"`
}

func (o *ConnectionScheduleData) GetBasicSchedule() *BasicSchedule {
	if o == nil {
		return nil
	}
	return o.BasicSchedule
}

func (o *ConnectionScheduleData) GetCron() *Cron {
	if o == nil {
		return nil
	}
	return o.Cron
}
