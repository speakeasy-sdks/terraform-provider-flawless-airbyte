// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

// AirbyteStreamConfiguration - the mutable part of the stream to configure the destination
type AirbyteStreamConfiguration struct {
	// Alias name to the stream to be used in the destination
	AliasName *string `json:"aliasName,omitempty"`
	// Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental`. Otherwise it is ignored.
	CursorField         []string            `json:"cursorField,omitempty"`
	DestinationSyncMode DestinationSyncMode `json:"destinationSyncMode"`
	// Whether field selection should be enabled. If this is true, only the properties in `selectedFields` will be included.
	FieldSelectionEnabled *bool `json:"fieldSelectionEnabled,omitempty"`
	// Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup`. Otherwise it is ignored.
	PrimaryKey [][]string `json:"primaryKey,omitempty"`
	// If this is true, the stream is selected with all of its properties. For new connections, this considers if the stream is suggested or not
	Selected *bool `json:"selected,omitempty"`
	// Paths to the fields that will be included in the configured catalog. This must be set if `fieldSelectedEnabled` is set. An empty list indicates that no properties will be included.
	SelectedFields []SelectedFieldInfo `json:"selectedFields,omitempty"`
	// Does the connector suggest that this stream be enabled by default?
	Suggested *bool    `json:"suggested,omitempty"`
	SyncMode  SyncMode `json:"syncMode"`

	AdditionalProperties interface{} `json:"-"`
}
type _AirbyteStreamConfiguration AirbyteStreamConfiguration

func (c *AirbyteStreamConfiguration) UnmarshalJSON(bs []byte) error {
	data := _AirbyteStreamConfiguration{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = AirbyteStreamConfiguration(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "aliasName")
	delete(additionalFields, "cursorField")
	delete(additionalFields, "destinationSyncMode")
	delete(additionalFields, "fieldSelectionEnabled")
	delete(additionalFields, "primaryKey")
	delete(additionalFields, "selected")
	delete(additionalFields, "selectedFields")
	delete(additionalFields, "suggested")
	delete(additionalFields, "syncMode")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c AirbyteStreamConfiguration) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_AirbyteStreamConfiguration(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
